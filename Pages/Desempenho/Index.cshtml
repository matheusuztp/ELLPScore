@page
@model Desempenho.IndexModel
@{
    ViewData["Title"] = "Verificar Desempenho";
    Layout = "~/Pages/Shared/_LayoutLogado.cshtml";
}

<div class="container mt-4">
    <h2>Verificar Desempenho</h2>

    <form method="get" id="gerarRelatorio" action="@Url.Page("Index", new { handler = "DesempenhoPorAluno" })">
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label for="alunoSelect">Selecione o Aluno:</label>
                    <select id="alunoSelect" asp-for="AlunoSelecionado" class="form-control">
                        @if(Model.Alunos.Count() == 0)
                        {
                            <option value="0">Não há alunos</option>
                        }

                        @foreach (var aluno in Model.Alunos)
                        {
                            <option value="@aluno.Value">@aluno.Text</option>
                        }
                    </select>
                </div>
            </div>
            <button type="submit" style="
                                        width: 10%;
                                        margin-top: 10px;
                                        margin-left: auto;"
                    class="btn btn-primary">
                Filtrar
            </button>
        </div>
    </form>

    <div id="grid" class="mt-4">
        <partial name="_DesempenhoPartial" model="@Model.DesempenhoDataModel" />
    </div>
</div>

@section Scripts {
    <script src="https://cdn.canvasjs.com/canvasjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    $(document).ready(function() {
        $('#gerarRelatorio').on('submit', function(event) {
            event.preventDefault(); 
            var form = $(this);
            var url = form.attr('action') || '@Url.Page("Index", new { handler = "DesempenhoPorAluno" })';

            $.ajax({
                url: url,
                type: 'GET',
                data: form.serialize(), 
                success: function(response) {
                    $('#grid').html(response); 
                    renderCharts();
                },
                error: function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Erro',
                        text: 'Erro ao gerar o relatório.'
                    });
                }
            });
        });
    });

    function renderCharts() {
        if (document.getElementById('graficoDesempenhoMateria')) {
            var chartMateria = new CanvasJS.Chart("graficoDesempenhoMateria", {
                theme: "light2",
                title: {
                    text: "Desempenho por Matéria"
                },
                axisY: {
                    title: "Notas"
                },
                data: [{
                    type: "column",
                    dataPoints: @Html.Raw(Json.Serialize(Model.DesempenhoDataModel.DesempenhoPorDisciplina.Select(d => new { label = d.Disciplina, y = d.Nota })))
                }]
            });
            chartMateria.render();
        }

        if (document.getElementById('graficoAlunosNotas')) {
            var chartAlunosNotas = new CanvasJS.Chart("graficoAlunosNotas", {
                theme: "light2",
                title: {
                    text: "Alunos x Período"
                },
                axisY: {
                    title: "Notas"
                },
                data: [{
                    type: "bar",
                    dataPoints: @Html.Raw(Json.Serialize(Model.DesempenhoDataModel.AlunosVsPeriodo.Select(d => new { label = d.Periodo, y = d.Nota })))
                }]
            });
            chartAlunosNotas.render();
        }

        if (document.getElementById('graficoAprovacoes')) {
            var chartAprovacoes = new CanvasJS.Chart("graficoAprovacoes", {
                theme: "light2",
                title: {
                    text: "Aprovações por Período"
                },
                axisY: {
                    title: "Aprovados"
                },
                data: [{
                    type: "line",
                    dataPoints: @Html.Raw(Json.Serialize(Model.DesempenhoDataModel.Aprovacoes.Select(d => new { label = d.Periodo, y = d.Aprovado })))
                }]
            });
            chartAprovacoes.render();
        }
    }
    </script>
}